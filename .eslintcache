[{"C:\\React_learning\\Quiz\\quiz\\src\\index.js":"1","C:\\React_learning\\Quiz\\quiz\\src\\App.js":"2","C:\\React_learning\\Quiz\\quiz\\src\\reportWebVitals.js":"3","C:\\React_learning\\Quiz\\quiz\\src\\components\\nav.js":"4","C:\\React_learning\\Quiz\\quiz\\src\\components\\Nav.js":"5","C:\\React_learning\\Quiz\\quiz\\src\\components\\About.js":"6","C:\\React_learning\\Quiz\\quiz\\src\\components\\quiz.js":"7","C:\\React_learning\\Quiz\\quiz\\src\\components\\Dashboard.js":"8","C:\\React_learning\\Quiz\\quiz\\src\\components\\questionOne.js":"9"},{"size":562,"mtime":1612312926362,"results":"10","hashOfConfig":"11"},{"size":712,"mtime":1612315493464,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":572,"mtime":1612291030873,"results":"14","hashOfConfig":"11"},{"size":624,"mtime":1612312392796,"results":"15","hashOfConfig":"11"},{"size":1183,"mtime":1612285784164,"results":"16","hashOfConfig":"11"},{"size":794,"mtime":1612580426601,"results":"17","hashOfConfig":"11"},{"size":1037,"mtime":1612312600310,"results":"18","hashOfConfig":"11"},{"size":2727,"mtime":1619572119463,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1xpc73f",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\React_learning\\Quiz\\quiz\\src\\index.js",[],["41","42"],"C:\\React_learning\\Quiz\\quiz\\src\\App.js",["43"],"import React, { Component } from 'react';\nimport './assets/App.css';\nimport Nav from './components/Nav';\nimport About from './components/About';\nimport quiz from './components/quiz';\nimport questionOne from './components/questionOne';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport QuestionOne from './components/questionOne';\n\nclass App extends Component{\n\n  render(){\n\n    return(\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Route path=\"/About\" component={About}  /> \n          <Route path=\"/quiz\" component={quiz} />\n          <Route path=\"/questionOne\" component={QuestionOne} />\n\n        </div>\n      </Router>\n      \n    );\n  }\n}\n\nexport default App;\n","C:\\React_learning\\Quiz\\quiz\\src\\reportWebVitals.js",[],"C:\\React_learning\\Quiz\\quiz\\src\\components\\nav.js",[],"C:\\React_learning\\Quiz\\quiz\\src\\components\\Nav.js",[],"C:\\React_learning\\Quiz\\quiz\\src\\components\\About.js",[],"C:\\React_learning\\Quiz\\quiz\\src\\components\\quiz.js",[],"C:\\React_learning\\Quiz\\quiz\\src\\components\\Dashboard.js",["44","45","46"],"C:\\React_learning\\Quiz\\quiz\\src\\components\\questionOne.js",["47","48"],"import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\n\r\n// declaro variable para la URL API\r\nconst URL = 'https://opentdb.com/api.php?amount=5&difficulty=easy&type=boolean';\r\n// CREO LA FUNCION QUE VA IR A LEER LAS PREGUNTAS --> TODAS\r\nconst useQuestions = () => {\r\n    //UTILIZO HOOKS\r\n    const [questions, setQuestions] = useState([])\r\n    // FETCHAPI\r\n    const refetch = async () => {\r\n        try {\r\n            //TRY CATCH PARA CAPTURAR ERRORES\r\n            //AWAIT PARA ESPERAR LA DATA Y LA COLOCO EN LA VARIABLE RESPONSE\r\n            const response = await fetch(URL)\r\n            // CONVERTIMOS A JSON LA INFORMACION DEL ARRAY OBTENIDO\r\n            const json = await response.json()\r\n            // ACTUALIZAMOS LA DATA EN EL HOOCK SET \r\n            setQuestions(json.results)\r\n        } catch (error) {\r\n            // SI HAY ERROR LO MUESTRA\r\n            console.log('error')\r\n        }\r\n    }\r\n    // ACTUALIZA EL ESTADO USANDO LA FUNCION useEffect\r\n    useEffect(() => {\r\n        // invocamos la funcion\r\n        refetch()\r\n    }, [])\r\n    // retornamos la variable con el fetch \r\n    return { questions, refetch }\r\n}\r\n\r\n// funcion de los botones \r\nconst QuestionComponent = ({ item, onClick }) => {\r\n    // requiere dos datos , un click y una respuesta \r\n    const respuestaPregunta = item.correct_answer === 'True'\r\n    // validamos el booleano \r\n\r\n    return <>\r\n        <li>{item.question}</li>\r\n        <Button variant=\"primary\" onClick={() => onClick(respuestaPregunta == true)}> TRUE </Button>\r\n        <Button variant=\"danger\" onClick={() => onClick(respuestaPregunta == false)}> FALSE </Button>\r\n    </>\r\n}\r\n\r\nconst QuestionOne = () => {\r\n\r\n    const [currentQuestion, setCurrentQuestion] = useState(0)\r\n    const { questions, refetch } = useQuestions();\r\n\r\n\r\n    const [respuestas, setRespuestas] = useState([])\r\n    console.log('respuestas', respuestas)\r\n    const grabarRespuesta = (answer) => {\r\n        setRespuestas([...respuestas, answer])\r\n        setCurrentQuestion(currentQuestion + 1)\r\n    }\r\n\r\n    const resetearTodo = () => {\r\n        setCurrentQuestion(0)\r\n        setRespuestas([])\r\n        refetch()\r\n    }\r\n    return (\r\n        <div>\r\n            { currentQuestion === questions.length ? <div>Test finalizado\r\n                <p> Respuestas correctas {respuestas.reduce((acumulador, item) => item ? acumulador + 1 : acumulador, 0)}</p>\r\n                <Button variant=\"danger\" onClick={() => resetearTodo()}> Resetear </Button>\r\n            </div> :\r\n                questions.length > 0 && <QuestionComponent item={questions[currentQuestion]} onClick={grabarRespuesta} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default QuestionOne;",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":6,"column":8,"nodeType":"55","messageId":"56","endLine":6,"endColumn":19},{"ruleId":"53","severity":1,"message":"57","line":2,"column":17,"nodeType":"55","messageId":"56","endLine":2,"endColumn":26},{"ruleId":"53","severity":1,"message":"58","line":2,"column":28,"nodeType":"55","messageId":"56","endLine":2,"endColumn":31},{"ruleId":"53","severity":1,"message":"59","line":2,"column":33,"nodeType":"55","messageId":"56","endLine":2,"endColumn":36},{"ruleId":"60","severity":1,"message":"61","line":42,"column":76,"nodeType":"62","messageId":"63","endLine":42,"endColumn":78},{"ruleId":"60","severity":1,"message":"61","line":43,"column":75,"nodeType":"62","messageId":"63","endLine":43,"endColumn":77},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'questionOne' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]